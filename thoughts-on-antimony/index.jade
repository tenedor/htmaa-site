extends ../jade/page.jade

block basePath
  -basePath = "../"

block relativePath
  -relativePath = "thoughts-on-antimony/"

block content
  h1 Thoughts on Antimony
  br
  p Here is an unedited, very rough initial mind-dump of tips for writing code with Antimony. Hopefully I'll make it nicer before long. See my #[a(href='../laser-cutter') laser cutter project] for examples of using Antimony and further thoughts.
  br
  ul
    li Often suppressing shape output is helpful. I like to use the following simple script:
      pre
        | import fab
        | 
        | title('Plug')
        | input('plug', fab.types.Shape)            
    li Building components at the origin and only rotating and translating them into position as the last step greatly simplifies reasoning. Injecting rotations and translations early in the pipeline quickly tangles your code.
    li There's an option to hide the UI markup on the view (with the View window active, select View > Hide UI from the top toolbar). I find I'm almost exclusively working in the graph, and it's helpful to remove the UI handles.
    li Maintaining a variables list at the top of your graph is very helpful - this lets you keep track of your major parameters and adjust them from a single location. For larger projects, I'll make an additional variables list for a subcomponent that has some configurable pieces, and I'll position that list at the top of the subcomponent's graph. Variables lists can also compute values from their inputs and present them as outputs - don't limit yourself to inputting.
    li To use a value from another node, you can pipe the value over to the node that wants it. But you can also refer to it by name! Each node has a unique name in its top left corner. The name is populated by default but editable, and it forms an object whose properties can be accessed via dot notation (for a rectangle r0, its shape is r0.shape). Naturally, then, you should give all nodes and all their properties names that use only {A-Za-z0-9-_} so that they can be referenced by other nodes - Antimony should enforce this style on you, but since it doesn't, enforce it on yourself.
    li When you use another node's value by name, you can use it as part of an expression like r0.width * 2.
    li Since you have a choice about whether you use a node's value by reference or by graph connection, there's some style to develop about when you choose one or the other. I like to use connectors to emphasize the key transformations in constructing a component, and tend to keep connected graphs to 10 or 15 nodes max (and usually they're more like 5). When piecing together subcomponents made of more than a couple nodes, I tend to refer to them by name.
    li As you compose larger models from smaller ones, keep the smaller components in your view. A good way to do this is to define per-component location points. Say your component point is named p. After building the component at the origin, translate it by p to its permanent location. If someone at location q wants to use it, they should translate it by q - p to use it. Better yet, name the component before translating it from the origin so you won't have to keep track of the component's associated location point.
    li Keep in mind that you can edit Antimony nodes. There are all sorts of small ways this comes in handy to keep your code simple. For instance, if you want to union four objects, edit the Union node to take four shape inputs; to subtract two things from an object, edit the Difference node to have positive input a and negative inputs b1 and b2. (You can also enter multiple shapes into a single Shape input in a node, which is cool, but I don't recommend actually doing it - making shape transformations explicit in the graph structure will keep your code more maintainable. But yes - if you graphically connect multiple shapes to the same input node, the input node will consider their union; if you textually input shapes by reference, you can use shape operators like |, &, and ~.)
    li Find some simple pattern for organizing your node layouts and stick to it. I like to arrange nodes in short vertical columns (2-4 nodes), to tie columns together left to right, and to organize blocks of connected or otherwise tightly related columns into vertically stacked regions of related components. Looking through some code samples to see how experienced users have organized their graphs is a good way to develop your style, and more generally to pick up lots of tips.
    li If multiple nodes are going to use a component but you want to try different versions of that component, add a layer of indirection: make a Shape List script and wire things up to use the list's properties, then swap out different shapes for those values to try different things.
    li When you're writing scripts with numbers, you can enforce constraints on the inputs inside the script. For instance, if you're doing a division with the input x, include a quick line that sets x to 1 if it equals 0. Forgetting to do this can lead to ugly failure modes like causing Antimony to hang or crash.
    li Sometimes decisions hinge on the presence of a symmetry, like whether some value is odd or even. In these cases, edit the node (e.g. a union) that you want to act conditionally - put some simple if/else logic inside and expose the Boolean value that controls it.
